# This has to be writen in voltDB GUI in the SQLQuery section.
# It will create procedures in the DB that will be called by name from the Python code.
# All names hare must be the same as in Constants.py

##############################################################################
#Users Table and Procedures
CREATE TABLE User (
   id INTEGER NOT NULL,
   first_name VARCHAR(64),
   last_name VARCHAR(64),
   age INTEGER,
   PRIMARY KEY (id)
);

PARTITION TABLE User ON COLUMN id;

CREATE PROCEDURE InsertIntoUser PARTITION ON TABLE User COLUMN id
   AS INSERT INTO User (id, first_name, last_name, age) VALUES (?, ?, ?, ?);

CREATE PROCEDURE SelectFromUserById PARTITION ON TABLE User COLUMN id
   AS SELECT * FROM User WHERE id = ?;

CREATE PROCEDURE DeleteFromUserById PARTITION ON TABLE User COLUMN id
   AS DELETE FROM User WHERE id = ?;

CREATE PROCEDURE DeleteAllFromUser
   AS DELETE FROM User;

##############################################################################

#Activity Table and Procedures
CREATE TABLE Activity (
    id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    category VARCHAR(64),
    description VARCHAR(64),
    PRIMARY KEY (id)
);

PARTITION TABLE Activity ON COLUMN id;

CREATE PROCEDURE InsertIntoActivity PARTITION ON TABLE Activity COLUMN id
   AS INSERT INTO Activity (id, user_id, category, description) VALUES (?, ?, ?, ?);

CREATE PROCEDURE SelectFromActivityById PARTITION ON TABLE Activity COLUMN id
   AS SELECT * FROM Activity WHERE id = ?;

CREATE PROCEDURE DeleteFromActivityById PARTITION ON TABLE Activity COLUMN id
   AS DELETE FROM Activity WHERE id = ?;

CREATE PROCEDURE DeleteAllFromActivity
   AS DELETE FROM Activity;
##############################################################################

### In order to run a JOIN query the tables have to be "REPLICATED", so the current tables
### have to be dropped and created again, the same for the procedures, but without the "PARTITION" part

#Users Table and Procedures
DROP PROCEDURE InsertIntoUser
DROP PROCEDURE DeleteFromUserById
DROP PROCEDURE DeleteAllFromUser
DROP TABLE User IF EXISTS CASCADE

CREATE TABLE User (
   id INTEGER NOT NULL,
   first_name VARCHAR(64),
   last_name VARCHAR(64),
   age INTEGER,
   PRIMARY KEY (id)
);

CREATE PROCEDURE InsertIntoUser
   AS INSERT INTO User (id, first_name, last_name, age) VALUES (?, ?, ?, ?);

CREATE PROCEDURE SelectFromUserById
   AS SELECT * FROM User WHERE id = ?;

CREATE PROCEDURE DeleteFromUserById
   AS DELETE FROM User WHERE id = ?;

CREATE PROCEDURE DeleteAllFromUser
   AS DELETE FROM User;


#Activity Table and Procedures
DROP PROCEDURE InsertIntoActivity
DROP PROCEDURE DeleteFromActivityById
DROP PROCEDURE DeleteAllFromActivity
DROP TABLE Activity IF EXISTS CASCADE

CREATE TABLE Activity (
    id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    category VARCHAR(64),
    description VARCHAR(64),
    PRIMARY KEY (id)
);

CREATE PROCEDURE InsertIntoActivity
   AS INSERT INTO Activity (id, user_id, category, description) VALUES (?, ?, ?, ?);

CREATE PROCEDURE SelectFromActivityById
   AS SELECT * FROM Activity WHERE id = ?;

CREATE PROCEDURE DeleteFromActivityById
   AS DELETE FROM Activity WHERE id = ?;

CREATE PROCEDURE DeleteAllFromActivity
   AS DELETE FROM Activity;

##############################################################################